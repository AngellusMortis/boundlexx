# Generated by Django 3.1.2 on 2020-10-09 22:06

from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.operations
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import storages.backends.azure_storage


class Migration(migrations.Migration):

    replaces = [('boundless', '0001_initial'), ('boundless', '0002_create_item_timeseries'), ('boundless', '0003_string_id_creative'), ('boundless', '0004_auto_20200722_2249'), ('boundless', '0005_fill_out_worlds'), ('boundless', '0006_create_worldpoll_timeseries'), ('boundless', '0007_worldpoll_active'), ('boundless', '0008_worldpoll_time'), ('boundless', '0009_testing_updates'), ('boundless', '0010_mayor_id_to_int'), ('boundless', '0011_colorvalue'), ('boundless', '0012_world_updates'), ('boundless', '0013_auto_20200805_2025'), ('boundless', '0014_auto_20200805_2124'), ('boundless', '0015_auto_20200806_1109'), ('boundless', '0016_resourcecount_percentage'), ('boundless', '0017_auto_20200809_2312'), ('boundless', '0018_auto_20200809_2316'), ('boundless', '0019_auto_20200826_2146'), ('boundless', '0020_delete_forumimage'), ('boundless', '0021_auto_20201003_1438'), ('boundless', '0022_auto_20201004_1143'), ('boundless', '0023_worldblockcolor_created_time'), ('boundless', '0024_auto_20201006_0050'), ('boundless', '0025_auto_20201009_1734'), ('boundless', '0026_auto_20201009_1742')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GameObj',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('game_id', models.IntegerField(db_index=True, verbose_name='Game ID')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_boundless.gameobj_set+', to='contenttypes.contenttype')),
            ],
            options={
                'unique_together': {('game_id', 'polymorphic_ctype')},
            },
        ),
        migrations.CreateModel(
            name='World',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('display_name', models.CharField(max_length=64)),
                ('region', models.CharField(choices=[('use', 'US East'), ('use', 'US West'), ('ecu', 'EU Central'), ('aus', 'Australia')], max_length=3)),
                ('tier', models.IntegerField()),
                ('description', models.CharField(max_length=16)),
                ('size', models.IntegerField()),
                ('world_type', models.CharField(max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('gameobj_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boundless.gameobj')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('boundless.gameobj',),
        ),
        migrations.CreateModel(
            name='Metal',
            fields=[
                ('gameobj_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boundless.gameobj')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('boundless.gameobj',),
        ),
        migrations.CreateModel(
            name='Subtitle',
            fields=[
                ('gameobj_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boundless.gameobj')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('boundless.gameobj',),
        ),
        migrations.CreateModel(
            name='LocalizedName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lang', models.CharField(max_length=16, verbose_name='Language')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('game_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.gameobj')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_boundless.localizedname_set+', to='contenttypes.contenttype')),
            ],
            options={
                'unique_together': {('game_obj', 'lang')},
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('gameobj_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boundless.gameobj')),
                ('item_subtitle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='boundless.subtitle')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('boundless.gameobj',),
        ),
        migrations.CreateModel(
            name='ItemShopStandPrice',
            fields=[
                ('time', models.DateTimeField(auto_now=True, primary_key=True, serialize=False)),
                ('location_x', models.IntegerField()),
                ('location_y', models.IntegerField()),
                ('location_z', models.IntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('item_count', models.IntegerField()),
                ('beacon_name', models.CharField(db_index=True, max_length=64)),
                ('guild_tag', models.CharField(max_length=8)),
                ('shop_activity', models.IntegerField()),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.world')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
            ],
            options={
                'abstract': False,
                'unique_together': {('time', 'world', 'location_x', 'location_y', 'item', 'price', 'item_count')},
            },
        ),
        migrations.CreateModel(
            name='ItemRequestBasketPrice',
            fields=[
                ('time', models.DateTimeField(auto_now=True, primary_key=True, serialize=False)),
                ('location_x', models.IntegerField()),
                ('location_y', models.IntegerField()),
                ('location_z', models.IntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('item_count', models.IntegerField()),
                ('beacon_name', models.CharField(db_index=True, max_length=64)),
                ('guild_tag', models.CharField(max_length=8)),
                ('shop_activity', models.IntegerField()),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.world')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
            ],
            options={
                'abstract': False,
                'unique_together': {('time', 'world', 'location_x', 'location_y', 'item', 'price', 'item_count')},
            },
        ),
        migrations.RunSQL(
            sql='CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE',
            reverse_sql='',
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "boundless_itemshopstandprice" DROP CONSTRAINT "boundless_itemshopstandprice_pkey"',
            reverse_sql='',
        ),
        migrations.RunSQL(
            sql="SELECT create_hypertable('boundless_itemshopstandprice', 'time', 'item_id', 4, chunk_time_interval => 86400000000, migrate_data => true, create_default_indexes => false)",
            reverse_sql='',
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "boundless_itemrequestbasketprice" DROP CONSTRAINT "boundless_itemrequestbasketprice_pkey"',
            reverse_sql='',
        ),
        migrations.RunSQL(
            sql="SELECT create_hypertable('boundless_itemrequestbasketprice', 'time', 'item_id', 4, chunk_time_interval => 86400000000, migrate_data => true, create_default_indexes => false)",
            reverse_sql='',
        ),
        migrations.AlterField(
            model_name='world',
            name='region',
            field=models.CharField(choices=[('use', 'US East'), ('use', 'US West'), ('ecu', 'EU Central'), ('aus', 'Australia'), ('creative', 'Creative')], max_length=16),
        ),
        migrations.AddField(
            model_name='item',
            name='string_id',
            field=models.CharField(max_length=64, verbose_name='String ID'),
        ),
        migrations.AddField(
            model_name='world',
            name='active',
            field=models.BooleanField(db_index=True, default=True),
        ),
        migrations.CreateModel(
            name='ItemSellRank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveSmallIntegerField(default=5)),
                ('last_update', models.DateTimeField(blank=True, null=True)),
                ('state_hash', models.CharField(default='', max_length=128)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.world')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemBuyRank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveSmallIntegerField(default=5)),
                ('last_update', models.DateTimeField(blank=True, null=True)),
                ('state_hash', models.CharField(default='', max_length=128)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.world')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='world',
            name='address',
            field=models.CharField(default=None, max_length=128, verbose_name='Server Address'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='api_url',
            field=models.URLField(default=None, verbose_name='API URL'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='chunks_url',
            field=models.URLField(default=None, verbose_name='Chunks URL'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='end',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='ip_address',
            field=models.GenericIPAddressField(default=None, verbose_name='Server IP Address'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='planets_url',
            field=models.URLField(default=None, verbose_name='Planets URL'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='start',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='time_offset',
            field=models.DateTimeField(default=None, verbose_name='Time Offset'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='websocket_url',
            field=models.URLField(default=None, verbose_name='Websocket URL'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='world',
            name='description',
            field=models.CharField(max_length=16, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='world',
            name='display_name',
            field=models.CharField(max_length=64, verbose_name='Display Name'),
        ),
        migrations.AlterField(
            model_name='world',
            name='name',
            field=models.CharField(max_length=64, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='world',
            name='region',
            field=models.CharField(choices=[('use', 'US East'), ('use', 'US West'), ('ecu', 'EU Central'), ('aus', 'Australia'), ('creative', 'Creative')], max_length=16, verbose_name='Server Region'),
        ),
        migrations.AlterField(
            model_name='world',
            name='size',
            field=models.IntegerField(verbose_name='World Size'),
        ),
        migrations.AlterField(
            model_name='world',
            name='tier',
            field=models.IntegerField(verbose_name='Tier'),
        ),
        migrations.AlterField(
            model_name='world',
            name='world_type',
            field=models.CharField(max_length=16, verbose_name='World Type'),
        ),
        migrations.AddField(
            model_name='world',
            name='atmosphere_color_b',
            field=models.FloatField(default=None, verbose_name='Atmosphere Linear B Color'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='atmosphere_color_g',
            field=models.FloatField(default=None, verbose_name='Atmosphere Linear G Color'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='atmosphere_color_r',
            field=models.FloatField(default=None, verbose_name='Atmosphere Linear R Color'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='water_color_b',
            field=models.FloatField(default=None, verbose_name='Water Linear B Color'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='water_color_g',
            field=models.FloatField(default=None, verbose_name='Water Linear G Color'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='world',
            name='water_color_r',
            field=models.FloatField(default=None, verbose_name='Water Linear R Color'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='WorldPoll',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.world')),
            ],
        ),
        migrations.CreateModel(
            name='WorldPollResult',
            fields=[
                ('time', models.DateTimeField(auto_now=True, primary_key=True, serialize=False)),
                ('player_count', models.PositiveSmallIntegerField(verbose_name='Player Count')),
                ('beacon_count', models.PositiveIntegerField(verbose_name='Beacon Count')),
                ('plot_count', models.PositiveIntegerField(verbose_name='Plot Count')),
                ('total_prestige', models.PositiveIntegerField(verbose_name='Total Prestige')),
                ('world_poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.worldpoll')),
            ],
            options={
                'unique_together': {('time', 'world_poll')},
            },
        ),
        migrations.CreateModel(
            name='ResourceCount',
            fields=[
                ('time', models.DateTimeField(auto_now=True, primary_key=True, serialize=False)),
                ('count', models.PositiveIntegerField(verbose_name='Plot Count')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
                ('world_poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.worldpoll')),
            ],
            options={
                'unique_together': {('time', 'world_poll', 'item')},
            },
        ),
        migrations.CreateModel(
            name='LeaderboardRecord',
            fields=[
                ('time', models.DateTimeField(auto_now=True, primary_key=True, serialize=False)),
                ('world_rank', models.PositiveSmallIntegerField(verbose_name='World Rank')),
                ('guild_tag', models.CharField(max_length=7, verbose_name='Guild Tag')),
                ('mayor_id', models.PositiveSmallIntegerField()),
                ('mayor_name', models.CharField(max_length=64)),
                ('mayor_type', models.PositiveSmallIntegerField()),
                ('name', models.CharField(max_length=64)),
                ('prestige', models.PositiveIntegerField()),
                ('world_poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.worldpoll')),
            ],
            options={
                'unique_together': {('time', 'world_poll', 'world_rank')},
            },
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "boundless_worldpollresult" DROP CONSTRAINT "boundless_worldpollresult_pkey"',
            reverse_sql='',
        ),
        migrations.RunSQL(
            sql="SELECT create_hypertable('boundless_worldpollresult', 'time', 'world_poll_id', 4, chunk_time_interval => 86400000000, migrate_data => true, create_default_indexes => false)",
            reverse_sql='',
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "boundless_resourcecount" DROP CONSTRAINT "boundless_resourcecount_pkey"',
            reverse_sql='',
        ),
        migrations.RunSQL(
            sql="SELECT create_hypertable('boundless_resourcecount', 'time', 'world_poll_id', 4, chunk_time_interval => 86400000000, migrate_data => true, create_default_indexes => false)",
            reverse_sql='',
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "boundless_leaderboardrecord" DROP CONSTRAINT "boundless_leaderboardrecord_pkey"',
            reverse_sql='',
        ),
        migrations.RunSQL(
            sql="SELECT create_hypertable('boundless_leaderboardrecord', 'time', 'world_poll_id', 4, chunk_time_interval => 86400000000, migrate_data => true, create_default_indexes => false)",
            reverse_sql='',
        ),
        migrations.AddField(
            model_name='worldpoll',
            name='active',
            field=models.BooleanField(db_index=True, default=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='region',
            field=models.CharField(choices=[('use', 'US East'), ('usw', 'US West'), ('ecu', 'EU Central'), ('aus', 'Australia'), ('creative', 'Creative')], max_length=16, verbose_name='Server Region'),
        ),
        migrations.AlterField(
            model_name='world',
            name='region',
            field=models.CharField(choices=[('use', 'US East'), ('usw', 'US West'), ('euc', 'EU Central'), ('aus', 'Australia'), ('creative', 'Creative')], max_length=16, verbose_name='Server Region'),
        ),
        migrations.AlterField(
            model_name='world',
            name='description',
            field=models.CharField(max_length=32, verbose_name='Description'),
        ),
        migrations.AddField(
            model_name='world',
            name='assignment',
            field=models.PositiveSmallIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='owner',
            field=models.PositiveSmallIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='number_of_regions',
            field=models.PositiveSmallIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='address',
            field=models.CharField(blank=True, max_length=128, null=True, verbose_name='Server Address'),
        ),
        migrations.AlterField(
            model_name='world',
            name='api_url',
            field=models.URLField(blank=True, null=True, verbose_name='API URL'),
        ),
        migrations.AlterField(
            model_name='world',
            name='chunks_url',
            field=models.URLField(blank=True, null=True, verbose_name='Chunks URL'),
        ),
        migrations.AlterField(
            model_name='world',
            name='ip_address',
            field=models.GenericIPAddressField(blank=True, null=True, verbose_name='Server IP Address'),
        ),
        migrations.AlterField(
            model_name='world',
            name='planets_url',
            field=models.URLField(blank=True, null=True, verbose_name='Planets URL'),
        ),
        migrations.AlterField(
            model_name='world',
            name='websocket_url',
            field=models.URLField(blank=True, null=True, verbose_name='Websocket URL'),
        ),
        migrations.AlterField(
            model_name='world',
            name='tier',
            field=models.PositiveSmallIntegerField(choices=[(0, 'Placid (1)'), (1, 'Temperate (2)'), (2, 'Rugged (3)'), (3, 'Inhospitable (4)'), (4, 'Turbulent (5)'), (5, 'Fierce (6)'), (6, 'Savage (7)'), (7, 'Brutal (8)')], verbose_name='Tier'),
        ),
        migrations.AlterField(
            model_name='world',
            name='world_type',
            field=models.CharField(choices=[('LUSH', 'Lush'), ('METAL', 'Metal'), ('COAL', 'Coal'), ('CORROSIVE', 'Corrosive'), ('SHOCK', 'Shock'), ('BLAST', 'Blast'), ('TOXIC', 'Toxic'), ('CHILL', 'Chill'), ('BURN', 'Burn'), ('UMBRIS', 'Umbris'), ('RIFT', 'Rift'), ('BLINK', 'Blink')], max_length=9, verbose_name='World Type'),
        ),
        migrations.AlterField(
            model_name='resourcecount',
            name='count',
            field=models.PositiveIntegerField(verbose_name='Count'),
        ),
        migrations.AlterField(
            model_name='localizedname',
            name='name',
            field=models.CharField(db_index=True, max_length=128, verbose_name='Name'),
        ),
        migrations.AddField(
            model_name='world',
            name='is_creative',
            field=models.BooleanField(db_index=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='is_locked',
            field=models.BooleanField(db_index=True, default=False, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='is_public',
            field=models.BooleanField(db_index=True, default=True, null=True),
        ),
        migrations.AddField(
            model_name='worldpoll',
            name='time',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterModelOptions(
            name='leaderboardrecord',
            options={'ordering': ['world_rank']},
        ),
        migrations.AlterModelOptions(
            name='resourcecount',
            options={'ordering': ['-count']},
        ),
        migrations.AlterField(
            model_name='leaderboardrecord',
            name='mayor_id',
            field=models.PositiveIntegerField(),
        ),
        migrations.CreateModel(
            name='ColorValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color_type', models.CharField(choices=[('CHARACTER', 'CHARACTER'), ('CHARACTER_DECAL', 'CHARACTER_DECAL'), ('CREATURE_BASE', 'CREATURE_BASE'), ('CREATURE_AUX', 'CREATURE_AUX'), ('CREATURE_EXOTIC', 'CREATURE_EXOTIC'), ('WOOD', 'WOOD'), ('ROCK', 'ROCK'), ('GRASS', 'GRASS'), ('ICE', 'ICE'), ('GLACIER', 'GLACIER'), ('SOIL', 'SOIL'), ('ASH', 'ASH'), ('GLEAM', 'GLEAM'), ('GRAVEL', 'GRAVEL'), ('GROWTH', 'GROWTH'), ('MOULD', 'MOULD'), ('SAND', 'SAND'), ('SPONGE', 'SPONGE'), ('LEAVES', 'LEAVES'), ('MANTLE', 'MANTLE'), ('MUD', 'MUD'), ('TANGLE', 'TANGLE'), ('THORNS', 'THORNS'), ('FLORA_1', 'FLORA_1'), ('FLORA_DECAL_1', 'FLORA_DECAL_1'), ('FLORA_2', 'FLORA_2'), ('FLORA_DECAL_2', 'FLORA_DECAL_2'), ('FLORA_3', 'FLORA_3'), ('FLORA_DECAL_3', 'FLORA_DECAL_3'), ('FLORA_4', 'FLORA_4'), ('FLORA_DECAL_4', 'FLORA_DECAL_4'), ('INK', 'INK'), ('FIBER', 'FIBER')], max_length=16)),
                ('shade', models.IntegerField()),
                ('base', models.IntegerField()),
                ('hlight', models.IntegerField()),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.color')),
            ],
            options={
                'unique_together': {('color', 'color_type')},
            },
        ),
        migrations.CreateModel(
            name='WorldCreatureColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creature_type', models.CharField(choices=[('CUTTLETRUNK', 'Cuttletrunk'), ('HOPPER', 'Hopper'), ('HUNTER', 'Hunter'), ('ROADRUNNER', 'Roadrunner'), ('SPITTER', 'Spitter'), ('WILDSTOCK', 'Wildstock')], max_length=16)),
                ('color_data', models.TextField()),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.world')),
            ],
            options={
                'unique_together': {('world', 'creature_type')},
            },
        ),
        migrations.AlterField(
            model_name='world',
            name='atmosphere_color_b',
            field=models.FloatField(null=True, verbose_name='Atmosphere Linear B Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='atmosphere_color_g',
            field=models.FloatField(null=True, verbose_name='Atmosphere Linear G Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='atmosphere_color_r',
            field=models.FloatField(null=True, verbose_name='Atmosphere Linear R Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='description',
            field=models.CharField(max_length=32, null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='world',
            name='name',
            field=models.CharField(max_length=64, null=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='world',
            name='region',
            field=models.CharField(choices=[('use', 'US East'), ('usw', 'US West'), ('euc', 'EU Central'), ('aus', 'Australia'), ('creative', 'Creative')], max_length=16, null=True, verbose_name='Server Region'),
        ),
        migrations.AlterField(
            model_name='world',
            name='size',
            field=models.IntegerField(null=True, verbose_name='World Size'),
        ),
        migrations.AlterField(
            model_name='world',
            name='tier',
            field=models.PositiveSmallIntegerField(choices=[(0, 'Placid (1)'), (1, 'Temperate (2)'), (2, 'Rugged (3)'), (3, 'Inhospitable (4)'), (4, 'Turbulent (5)'), (5, 'Fierce (6)'), (6, 'Savage (7)'), (7, 'Brutal (8)')], null=True, verbose_name='Tier'),
        ),
        migrations.AlterField(
            model_name='world',
            name='time_offset',
            field=models.DateTimeField(null=True, verbose_name='Time Offset'),
        ),
        migrations.AlterField(
            model_name='world',
            name='water_color_b',
            field=models.FloatField(null=True, verbose_name='Water Linear B Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='water_color_g',
            field=models.FloatField(null=True, verbose_name='Water Linear G Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='water_color_r',
            field=models.FloatField(null=True, verbose_name='Water Linear R Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='world_type',
            field=models.CharField(choices=[('LUSH', 'Lush'), ('METAL', 'Metal'), ('COAL', 'Coal'), ('CORROSIVE', 'Corrosive'), ('SHOCK', 'Shock'), ('BLAST', 'Blast'), ('TOXIC', 'Toxic'), ('CHILL', 'Chill'), ('BURN', 'Burn'), ('UMBRIS', 'Umbris'), ('RIFT', 'Rift'), ('BLINK', 'Blink')], max_length=9, null=True, verbose_name='World Type'),
        ),
        migrations.AlterModelOptions(
            name='gameobj',
            options={'ordering': ['game_id']},
        ),
        migrations.AddField(
            model_name='world',
            name='closest_world',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.world'),
        ),
        migrations.AddField(
            model_name='world',
            name='closest_world_distance',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='core_liquid',
            field=models.TextField(blank=True, choices=[('lava', 'Lava'), ('water', 'WATER')], max_length=5, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='surface_liquid',
            field=models.TextField(blank=True, choices=[('lava', 'Lava'), ('water', 'WATER')], max_length=5, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='forum_id',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterModelOptions(
            name='world',
            options={'ordering': ['id']},
        ),
        migrations.RemoveField(
            model_name='world',
            name='core_liquid',
        ),
        migrations.RemoveField(
            model_name='world',
            name='surface_liquid',
        ),
        migrations.RemoveField(
            model_name='world',
            name='closest_world',
        ),
        migrations.RemoveField(
            model_name='world',
            name='closest_world_distance',
        ),
        migrations.AlterField(
            model_name='world',
            name='forum_id',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='assignment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.world'),
        ),
        migrations.CreateModel(
            name='WorldBlockColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.color')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.world')),
                ('_new_color', models.NullBooleanField()),
                ('_exist_via_transform', models.NullBooleanField()),
                ('_exist_on_perm', models.NullBooleanField()),
            ],
            options={
                'unique_together': {('world', 'item')},
            },
        ),
        migrations.AlterField(
            model_name='world',
            name='display_name',
            field=models.CharField(db_index=True, max_length=64, verbose_name='Display Name'),
        ),
        migrations.AlterField(
            model_name='world',
            name='end',
            field=models.DateTimeField(blank=True, db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='name',
            field=models.CharField(db_index=True, max_length=64, null=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='world',
            name='region',
            field=models.CharField(choices=[('use', 'US East'), ('usw', 'US West'), ('euc', 'EU Central'), ('aus', 'Australia'), ('creative', 'Creative')], db_index=True, max_length=16, null=True, verbose_name='Server Region'),
        ),
        migrations.AlterField(
            model_name='world',
            name='start',
            field=models.DateTimeField(blank=True, db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='tier',
            field=models.PositiveSmallIntegerField(choices=[(0, 'Placid (1)'), (1, 'Temperate (2)'), (2, 'Rugged (3)'), (3, 'Inhospitable (4)'), (4, 'Turbulent (5)'), (5, 'Fierce (6)'), (6, 'Savage (7)'), (7, 'Brutal (8)')], db_index=True, null=True, verbose_name='Tier'),
        ),
        migrations.AlterField(
            model_name='world',
            name='world_type',
            field=models.CharField(choices=[('LUSH', 'Lush'), ('METAL', 'Metal'), ('COAL', 'Coal'), ('CORROSIVE', 'Corrosive'), ('SHOCK', 'Shock'), ('BLAST', 'Blast'), ('TOXIC', 'Toxic'), ('CHILL', 'Chill'), ('BURN', 'Burn'), ('UMBRIS', 'Umbris'), ('RIFT', 'Rift'), ('BLINK', 'Blink')], db_index=True, max_length=9, null=True, verbose_name='World Type'),
        ),
        migrations.AlterField(
            model_name='world',
            name='assignment',
            field=models.ForeignKey(blank=True, help_text='The world this planet orbits, if any', null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.world'),
        ),
        migrations.AlterField(
            model_name='world',
            name='is_creative',
            field=models.BooleanField(db_index=True, default=False, help_text='If the world is a creative one', null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='is_locked',
            field=models.BooleanField(db_index=True, default=False, help_text='If this world is locked (only `true` for Soverign worlds)', null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='is_public',
            field=models.BooleanField(db_index=True, default=True, help_text='If this world is public', null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='region',
            field=models.CharField(choices=[('use', 'US East'), ('usw', 'US West'), ('euc', 'EU Central'), ('aus', 'Australia'), ('creative', 'Creative')], db_index=True, help_text='Server Region', max_length=16, null=True, verbose_name='Server Region'),
        ),
        migrations.AlterField(
            model_name='world',
            name='tier',
            field=models.PositiveSmallIntegerField(choices=[(0, 'Placid (1)'), (1, 'Temperate (2)'), (2, 'Rugged (3)'), (3, 'Inhospitable (4)'), (4, 'Turbulent (5)'), (5, 'Fierce (6)'), (6, 'Savage (7)'), (7, 'Brutal (8)')], db_index=True, help_text='Tier of the world. Starts at 0.', null=True, verbose_name='Tier'),
        ),
        migrations.CreateModel(
            name='WorldDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.PositiveSmallIntegerField(verbose_name='Distance to work in blinksecs')),
                ('world_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.world')),
                ('world_dest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.world')),
            ],
        ),
        django.contrib.postgres.operations.BtreeGinExtension(
        ),
        migrations.AddIndex(
            model_name='world',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='boundless_w_name_97f9a1_gin'),
        ),
        migrations.AddIndex(
            model_name='world',
            index=django.contrib.postgres.indexes.GinIndex(fields=['display_name'], name='boundless_w_display_63cee0_gin'),
        ),
        migrations.AlterModelOptions(
            name='item',
            options={},
        ),
        migrations.AddIndex(
            model_name='item',
            index=django.contrib.postgres.indexes.GinIndex(fields=['string_id'], name='boundless_i_string__186db8_gin'),
        ),
        migrations.AddIndex(
            model_name='localizedname',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='boundless_l_name_f8ba51_gin'),
        ),
        migrations.AlterField(
            model_name='world',
            name='region',
            field=models.CharField(choices=[('use', 'US East'), ('usw', 'US West'), ('euc', 'EU Central'), ('aus', 'Australia'), ('sandbox', 'Sandbox')], db_index=True, help_text='Server Region', max_length=16, null=True, verbose_name='Server Region'),
        ),
        migrations.AddField(
            model_name='resourcecount',
            name='percentage',
            field=models.DecimalField(decimal_places=2, max_digits=5),
        ),
        migrations.AlterField(
            model_name='world',
            name='world_type',
            field=models.CharField(choices=[('LUSH', 'Lush'), ('METAL', 'Metal'), ('COAL', 'Coal'), ('CORROSIVE', 'Corrosive'), ('SHOCK', 'Shock'), ('BLAST', 'Blast'), ('TOXIC', 'Toxic'), ('CHILL', 'Chill'), ('BURN', 'Burn'), ('UMBRIS', 'Umbris'), ('RIFT', 'Rift'), ('BLINK', 'Blink')], db_index=True, max_length=10, null=True, verbose_name='World Type'),
        ),
        migrations.AlterField(
            model_name='world',
            name='world_type',
            field=models.CharField(choices=[('LUSH', 'Lush'), ('METAL', 'Metal'), ('COAL', 'Coal'), ('CORROSIVE', 'Corrosive'), ('SHOCK', 'Shock'), ('BLAST', 'Blast'), ('TOXIC', 'Toxic'), ('CHILL', 'Chill'), ('BURN', 'Burn'), ('DARKMATTER', 'Umbris'), ('RIFT', 'Rift'), ('BLINK', 'Blink')], db_index=True, max_length=10, null=True, verbose_name='World Type'),
        ),
        migrations.AlterField(
            model_name='worldpollresult',
            name='total_prestige',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Total Prestige'),
        ),
        migrations.AddField(
            model_name='world',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to=''),
        ),
        migrations.AddField(
            model_name='world',
            name='exo_notification_sent',
            field=models.NullBooleanField(),
        ),
        migrations.AlterField(
            model_name='itembuyrank',
            name='rank',
            field=models.PositiveSmallIntegerField(default=20),
        ),
        migrations.AlterField(
            model_name='itemsellrank',
            name='rank',
            field=models.PositiveSmallIntegerField(default=20),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='_days_since_last',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterUniqueTogether(
            name='worldblockcolor',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='time',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='colorvalue',
            name='color_type',
            field=models.CharField(choices=[('CHARACTER', 'CHARACTER'), ('CHARACTER_DECAL', 'CHARACTER_DECAL'), ('CREATURE_BASE', 'CREATURE_BASE'), ('CREATURE_AUX', 'CREATURE_AUX'), ('CREATURE_EXOTIC', 'CREATURE_EXOTIC'), ('WOOD', 'WOOD'), ('ROCK', 'ROCK'), ('GRASS', 'GRASS'), ('ICE', 'ICE'), ('GLACIER', 'GLACIER'), ('SOIL', 'SOIL'), ('ASH', 'ASH'), ('GLEAM', 'GLEAM'), ('GRAVEL', 'GRAVEL'), ('GROWTH', 'GROWTH'), ('MOULD', 'MOULD'), ('SAND', 'SAND'), ('SPONGE', 'SPONGE'), ('LEAVES', 'LEAVES'), ('MANTLE', 'MANTLE'), ('MUD', 'MUD'), ('TANGLE', 'TANGLE'), ('THORNS', 'THORNS'), ('FLORA_1', 'FLORA_1'), ('FLORA_DECAL_1', 'FLORA_DECAL_1'), ('FLORA_2', 'FLORA_2'), ('FLORA_DECAL_2', 'FLORA_DECAL_2'), ('FLORA_3', 'FLORA_3'), ('FLORA_DECAL_3', 'FLORA_DECAL_3'), ('FLORA_4', 'FLORA_4'), ('FLORA_DECAL_4', 'FLORA_DECAL_4'), ('INK', 'INK'), ('FIBER', 'FIBER')], max_length=64),
        ),
        migrations.CreateModel(
            name='LocalizedString',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('string_id', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('gameobj_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boundless.gameobj')),
                ('heat', models.PositiveSmallIntegerField()),
                ('craft_xp', models.PositiveSmallIntegerField()),
                ('machine', models.CharField(choices=[('COMPACTOR', 'COMPACTOR'), ('CRAFTING_TABLE', 'CRAFTING_TABLE'), ('DYE_MAKER', 'DYE_MAKER'), ('EXTRACTOR', 'EXTRACTOR'), ('FURNACE', 'FURNACE'), ('MIXER', 'MIXER'), ('REFINERY', 'REFINERY'), ('WORKBENCH', 'WORKBENCH')], max_length=16, null=True)),
                ('machine_level', models.CharField(blank=True, choices=[('', ''), ('Standard', 'Standard'), ('Powered', 'Powered'), ('Overdriven', 'Overdriven'), ('Supercharged', 'Supercharged')], max_length=16)),
                ('power', models.PositiveIntegerField()),
                ('group_name', models.CharField(max_length=32)),
                ('knowledge_unlock_level', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('boundless.gameobj',),
        ),
        migrations.CreateModel(
            name='RecipeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('display_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.localizedstring')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='mint_value',
            field=models.FloatField(default=0, verbose_name='Chrysominter Value'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='item',
            name='name',
            field=models.CharField(default='', max_length=64, verbose_name='Name'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='SkillGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_type', models.CharField(choices=[('Attributes', 'Attributes'), ('Basic', 'Basic'), ('Epic', 'Epic')], max_length=16)),
                ('name', models.CharField(max_length=16)),
                ('unlock_level', models.PositiveIntegerField()),
                ('display_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.localizedstring')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_unlocks', models.PositiveIntegerField(help_text='How many times this skill can be unlocked')),
                ('cost', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=64)),
                ('order', models.PositiveIntegerField()),
                ('category', models.CharField(max_length=32)),
                ('link_type', models.CharField(choices=[('None', 'None'), ('Left', 'Left'), ('Right', 'Right')], max_length=8)),
                ('bundle_prefix', models.CharField(max_length=128)),
                ('affected_by_other_skills', models.BooleanField()),
                ('description', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.localizedstring')),
                ('display_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.localizedstring')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeTint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tint_from', to='boundless.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField()),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.recipe')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.skill')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(choices=[(0, 'Single'), (1, 'Bulk'), (2, 'Mass')])),
                ('wear', models.PositiveIntegerField()),
                ('spark', models.PositiveIntegerField()),
                ('duration', models.PositiveIntegerField()),
                ('output_quantity', models.PositiveIntegerField()),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveSmallIntegerField()),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.recipegroup')),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
                ('recipe_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.recipelevel')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeGroupMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.recipegroup')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
            ],
        ),
        migrations.AddField(
            model_name='recipe',
            name='output',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item'),
        ),
        migrations.CreateModel(
            name='LocalizedStringText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lang', models.CharField(max_length=16, verbose_name='Language')),
                ('text', models.TextField()),
                ('string', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.localizedstring')),
            ],
        ),
        migrations.AddIndex(
            model_name='localizedstringtext',
            index=django.contrib.postgres.indexes.GinIndex(fields=['string'], name='boundless_l_string__91275e_gin'),
        ),
        migrations.AlterField(
            model_name='item',
            name='mint_value',
            field=models.FloatField(blank=True, null=True, verbose_name='Chrysominter Value'),
        ),
        migrations.AlterField(
            model_name='localizedstring',
            name='string_id',
            field=models.CharField(max_length=128, unique=True),
        ),
        migrations.AddField(
            model_name='item',
            name='description',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.localizedstring'),
        ),
        migrations.AddField(
            model_name='item',
            name='list_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.localizedstring'),
        ),
        migrations.AddField(
            model_name='skill',
            name='group',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='boundless.skillgroup'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='localizedstringtext',
            name='string',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strings', to='boundless.localizedstring'),
        ),
        migrations.AlterField(
            model_name='skill',
            name='name',
            field=models.CharField(max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='skillgroup',
            name='name',
            field=models.CharField(max_length=16, unique=True),
        ),
        migrations.RemoveField(
            model_name='recipetint',
            name='item',
        ),
        migrations.RemoveField(
            model_name='recipetint',
            name='recipe',
        ),
        migrations.RemoveField(
            model_name='recipeinput',
            name='recipe_level',
        ),
        migrations.RemoveField(
            model_name='recipelevel',
            name='recipe',
        ),
        migrations.RemoveField(
            model_name='reciperequirement',
            name='recipe',
        ),
        migrations.AddField(
            model_name='recipe',
            name='can_hand_craft',
            field=models.BooleanField(default=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='recipe',
            name='tints',
            field=models.ManyToManyField(related_name='_recipe_tints_+', to='boundless.Item'),
        ),
        migrations.AddField(
            model_name='recipegroup',
            name='members',
            field=models.ManyToManyField(to='boundless.Item'),
        ),
        migrations.DeleteModel(
            name='RecipeGroupMember',
        ),
        migrations.DeleteModel(
            name='RecipeTint',
        ),
        migrations.AddField(
            model_name='recipe',
            name='requirements',
            field=models.ManyToManyField(to='boundless.RecipeRequirement'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='levels',
            field=models.ManyToManyField(to='boundless.RecipeLevel'),
        ),
        migrations.AddField(
            model_name='recipelevel',
            name='inputs',
            field=models.ManyToManyField(to='boundless.RecipeInput'),
        ),
        migrations.RemoveIndex(
            model_name='localizedstringtext',
            name='boundless_l_string__91275e_gin',
        ),
        migrations.AddIndex(
            model_name='localizedstringtext',
            index=django.contrib.postgres.indexes.GinIndex(fields=['text'], name='boundless_l_text_aa0532_gin'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='boundless_s_name_a7d57d_gin'),
        ),
        migrations.AddIndex(
            model_name='skillgroup',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='boundless_s_name_7fe673_gin'),
        ),
        migrations.AddField(
            model_name='localizedstringtext',
            name='_plain_text',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='skill',
            name='description',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.localizedstring'),
        ),
        migrations.CreateModel(
            name='Emoji',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('image', models.ImageField(storage=storages.backends.azure_storage.AzureStorage(azure_container='local-emoji'), upload_to='')),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='skill',
            name='icon',
            field=models.ImageField(storage=storages.backends.azure_storage.AzureStorage(azure_container='local-skills'), upload_to=''),
        ),
        migrations.AlterField(
            model_name='world',
            name='image',
            field=models.ImageField(blank=True, null=True, storage=storages.backends.azure_storage.AzureStorage(azure_container='local-worlds'), upload_to=''),
        ),
        migrations.CreateModel(
            name='EmojiAltName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('emoji', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.emoji')),
            ],
        ),
        migrations.RemoveField(
            model_name='world',
            name='description',
        ),
        migrations.RenameField(
            model_name='world',
            old_name='exo_notification_sent',
            new_name='notification_sent',
        ),
        migrations.RemoveField(
            model_name='worldblockcolor',
            name='_days_since_last',
        ),
        migrations.AddField(
            model_name='resourcecount',
            name='_average_per_chunk',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='html_name',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.RemoveField(
            model_name='worldblockcolor',
            name='_exist_on_perm',
        ),
        migrations.RemoveField(
            model_name='worldblockcolor',
            name='_exist_via_transform',
        ),
        migrations.RemoveField(
            model_name='worldblockcolor',
            name='_new_color',
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='first_world',
            field=models.ForeignKey(blank=True, help_text='First non-Exo world with this color', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='boundless.world'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='is_new',
            field=models.BooleanField(default=False, help_text='This is the first time this WBC has appeared on non-Exo'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='is_new_transform',
            field=models.BooleanField(default=False, help_text='This is the first time this WBC has been avaiable via transform'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='last_exo',
            field=models.ForeignKey(blank=True, help_text='Most recent Exo with this color (only for Exo WBCs)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='boundless.world'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='transform_first_world',
            field=models.ForeignKey(blank=True, help_text='First non-Exo WBC that can transform into this one', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='boundless.world'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='transform_last_exo',
            field=models.ForeignKey(blank=True, help_text='Most recent Exo WBC that can transform into this one (only for Exo WBCs)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='boundless.world'),
        ),
        migrations.AlterField(
            model_name='worldblockcolor',
            name='world',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.world'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='is_default',
            field=models.BooleanField(default=True, help_text='Is this the color the world spawned with?'),
        ),
        migrations.AlterModelOptions(
            name='worldblockcolor',
            options={'ordering': ['item_id']},
        ),
        migrations.AlterField(
            model_name='item',
            name='string_id',
            field=models.CharField(db_index=True, max_length=64, verbose_name='String ID'),
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('gameobj_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boundless.gameobj')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Name')),
                ('block_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.item')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('boundless.gameobj',),
        ),
        migrations.CreateModel(
            name='AltItem',
            fields=[
                ('gameobj_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boundless.gameobj')),
                ('name', models.CharField(max_length=64, verbose_name='String ID')),
                ('base_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.item')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('boundless.gameobj',),
        ),
        migrations.AddField(
            model_name='world',
            name='sort_name',
            field=models.TextField(blank=True, db_index=True, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='text_name',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='recipe',
            name='required_backer_tier',
            field=models.PositiveSmallIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='recipe',
            name='required_event',
            field=models.CharField(blank=True, choices=[('GLEAMBOW_RACING', 'Gleambow Racting'), ('CHRISTMAS', 'Christmas'), ('VALENTINES', 'Valentines'), ('HALLOWEEN', 'Halloween'), ('BIRTHDAY', 'Birthday')], max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='machine',
            field=models.CharField(blank=True, choices=[('COMPACTOR', 'COMPACTOR'), ('CRAFTING_TABLE', 'CRAFTING_TABLE'), ('DYE_MAKER', 'DYE_MAKER'), ('EXTRACTOR', 'EXTRACTOR'), ('FURNACE', 'FURNACE'), ('MIXER', 'MIXER'), ('REFINERY', 'REFINERY'), ('WORKBENCH', 'WORKBENCH')], max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='machine_level',
            field=models.CharField(blank=True, choices=[('', ''), ('Standard', 'Standard'), ('Powered', 'Powered'), ('Overdriven', 'Overdriven'), ('Supercharged', 'Supercharged')], max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='recipegroup',
            name='name',
            field=models.CharField(max_length=32, unique=True),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='machine',
            field=models.CharField(blank=True, choices=[('COMPACTOR', 'COMPACTOR'), ('CRAFTING_TABLE', 'CRAFTING_TABLE'), ('DYE_MAKER', 'DYE_MAKER'), ('EXTRACTOR', 'EXTRACTOR'), ('FURNACE', 'FURNACE'), ('MIXER', 'MIXER'), ('REFINERY', 'REFINERY'), ('WORKBENCH', 'WORKBENCH')], db_index=True, max_length=16, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='is_finalized',
            field=models.BooleanField(null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='is_public_claim',
            field=models.BooleanField(null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='is_public_edit',
            field=models.BooleanField(null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='notification_sent',
            field=models.BooleanField(null=True),
        ),
        migrations.CreateModel(
            name='ForumImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField()),
                ('game_obj', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='boundless.gameobj')),
                ('checksum', models.CharField(max_length=64)),
                ('shortcut_url', models.CharField(max_length=64)),
            ],
        ),
        migrations.AddField(
            model_name='world',
            name='special_type',
            field=models.PositiveSmallIntegerField(choices=[(1, 'Color-Cycling')], db_index=True, null=True, verbose_name='Special Type'),
        ),
        migrations.AlterField(
            model_name='world',
            name='active',
            field=models.BooleanField(db_index=True, default=True, help_text='Does this world still exist (returned by game API)?'),
        ),
        migrations.AlterField(
            model_name='worldblockcolor',
            name='active',
            field=models.BooleanField(default=True, help_text='Is this the current color for the world?'),
        ),
        migrations.AddIndex(
            model_name='emoji',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='boundless_e_name_753a14_gin'),
        ),
        migrations.AddIndex(
            model_name='emojialtname',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='boundless_e_name_3fa367_gin'),
        ),
        migrations.AlterModelOptions(
            name='emoji',
            options={},
        ),
        migrations.DeleteModel(
            name='ForumImage',
        ),
        migrations.AddIndex(
            model_name='gameobj',
            index=django.contrib.postgres.indexes.GinIndex(fields=['game_id'], name='boundless_g_game_id_0f0659_gin'),
        ),
        migrations.RemoveIndex(
            model_name='world',
            name='boundless_w_display_63cee0_gin',
        ),
        migrations.AddIndex(
            model_name='world',
            index=django.contrib.postgres.indexes.GinIndex(fields=['text_name'], name='boundless_w_text_na_f65d9b_gin'),
        ),
        migrations.AddIndex(
            model_name='world',
            index=django.contrib.postgres.indexes.GinIndex(fields=['id'], name='boundless_w_id_58b1eb_gin'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='created_time',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='uploader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='worldcreaturecolor',
            name='time',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='worldcreaturecolor',
            name='uploader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='world',
            name='special_type',
            field=models.PositiveSmallIntegerField(choices=[(1, 'Color-Cycling')], db_index=True, help_text='`1` = Color-Cycling', null=True, verbose_name='Special Type'),
        ),
        migrations.AddField(
            model_name='emoji',
            name='is_boundless_only',
            field=models.BooleanField(db_index=True, default=False),
        ),
    ]
