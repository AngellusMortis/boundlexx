# Generated by Django 3.1.1 on 2020-09-30 15:00

import django.contrib.postgres.indexes
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import storages.backends.azure_storage


class Migration(migrations.Migration):

    replaces = [('boundless', '0019_auto_20200826_2146'), ('boundless', '0020_world_image'), ('boundless', '0021_world_exo_notification_sent'), ('boundless', '0022_auto_20200831_1318'), ('boundless', '0023_worldblockcolor__days_since_last'), ('boundless', '0024_auto_20200902_1658'), ('boundless', '0025_worldblockcolor_time'), ('boundless', '0026_auto_20200912_1701'), ('boundless', '0027_skills_recipes'), ('boundless', '0028_auto_20200915_0931'), ('boundless', '0029_emojialtname'), ('boundless', '0030_remove_world_description'), ('boundless', '0031_auto_20200917_0917'), ('boundless', '0032_auto_20200919_0844'), ('boundless', '0033_resourcecount__average_per_chunk'), ('boundless', '0034_auto_20200919_1009'), ('boundless', '0035_auto_20200919_1137'), ('boundless', '0036_auto_20200919_1534'), ('boundless', '0037_emoji_active'), ('boundless', '0038_auto_20200919_2034'), ('boundless', '0039_auto_20200919_2135'), ('boundless', '0040_auto_20200921_1932'), ('boundless', '0041_forumimage'), ('boundless', '0042_forumimage_checksum'), ('boundless', '0043_forumimage_shortcut_url'), ('boundless', '0044_auto_20200924_1341'), ('boundless', '0045_world_is_finalized'), ('boundless', '0046_auto_20200928_2332'), ('boundless', '0047_auto_20200928_2338'), ('boundless', '0048_auto_20200930_1058')]

    dependencies = [
        ('boundless', '0018_auto_20200809_2316'),
    ]

    operations = [
        migrations.AlterField(
            model_name='worldpollresult',
            name='total_prestige',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Total Prestige'),
        ),
        migrations.AddField(
            model_name='world',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to=''),
        ),
        migrations.AddField(
            model_name='world',
            name='exo_notification_sent',
            field=models.NullBooleanField(),
        ),
        migrations.AlterField(
            model_name='itembuyrank',
            name='rank',
            field=models.PositiveSmallIntegerField(default=20),
        ),
        migrations.AlterField(
            model_name='itemsellrank',
            name='rank',
            field=models.PositiveSmallIntegerField(default=20),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='_days_since_last',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterUniqueTogether(
            name='worldblockcolor',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='time',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='colorvalue',
            name='color_type',
            field=models.CharField(choices=[('CHARACTER', 'CHARACTER'), ('CHARACTER_DECAL', 'CHARACTER_DECAL'), ('CREATURE_BASE', 'CREATURE_BASE'), ('CREATURE_AUX', 'CREATURE_AUX'), ('CREATURE_EXOTIC', 'CREATURE_EXOTIC'), ('WOOD', 'WOOD'), ('ROCK', 'ROCK'), ('GRASS', 'GRASS'), ('ICE', 'ICE'), ('GLACIER', 'GLACIER'), ('SOIL', 'SOIL'), ('ASH', 'ASH'), ('GLEAM', 'GLEAM'), ('GRAVEL', 'GRAVEL'), ('GROWTH', 'GROWTH'), ('MOULD', 'MOULD'), ('SAND', 'SAND'), ('SPONGE', 'SPONGE'), ('LEAVES', 'LEAVES'), ('MANTLE', 'MANTLE'), ('MUD', 'MUD'), ('TANGLE', 'TANGLE'), ('THORNS', 'THORNS'), ('FLORA_1', 'FLORA_1'), ('FLORA_DECAL_1', 'FLORA_DECAL_1'), ('FLORA_2', 'FLORA_2'), ('FLORA_DECAL_2', 'FLORA_DECAL_2'), ('FLORA_3', 'FLORA_3'), ('FLORA_DECAL_3', 'FLORA_DECAL_3'), ('FLORA_4', 'FLORA_4'), ('FLORA_DECAL_4', 'FLORA_DECAL_4'), ('INK', 'INK'), ('FIBER', 'FIBER')], max_length=64),
        ),
        migrations.CreateModel(
            name='LocalizedString',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('string_id', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('gameobj_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boundless.gameobj')),
                ('heat', models.PositiveSmallIntegerField()),
                ('craft_xp', models.PositiveSmallIntegerField()),
                ('machine', models.CharField(choices=[('COMPACTOR', 'COMPACTOR'), ('CRAFTING_TABLE', 'CRAFTING_TABLE'), ('DYE_MAKER', 'DYE_MAKER'), ('EXTRACTOR', 'EXTRACTOR'), ('FURNACE', 'FURNACE'), ('MIXER', 'MIXER'), ('REFINERY', 'REFINERY'), ('WORKBENCH', 'WORKBENCH')], max_length=16, null=True)),
                ('machine_level', models.CharField(blank=True, choices=[('', ''), ('Standard', 'Standard'), ('Powered', 'Powered'), ('Overdriven', 'Overdriven'), ('Supercharged', 'Supercharged')], max_length=16)),
                ('power', models.PositiveIntegerField()),
                ('group_name', models.CharField(max_length=32)),
                ('knowledge_unlock_level', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('boundless.gameobj',),
        ),
        migrations.CreateModel(
            name='RecipeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('display_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.localizedstring')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='mint_value',
            field=models.FloatField(default=0, verbose_name='Chrysominter Value'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='item',
            name='name',
            field=models.CharField(default='', max_length=64, verbose_name='Name'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='SkillGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_type', models.CharField(choices=[('Attributes', 'Attributes'), ('Basic', 'Basic'), ('Epic', 'Epic')], max_length=16)),
                ('name', models.CharField(max_length=16)),
                ('unlock_level', models.PositiveIntegerField()),
                ('display_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.localizedstring')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_unlocks', models.PositiveIntegerField(help_text='How many times this skill can be unlocked')),
                ('cost', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=64)),
                ('order', models.PositiveIntegerField()),
                ('category', models.CharField(max_length=32)),
                ('link_type', models.CharField(choices=[('None', 'None'), ('Left', 'Left'), ('Right', 'Right')], max_length=8)),
                ('bundle_prefix', models.CharField(max_length=128)),
                ('affected_by_other_skills', models.BooleanField()),
                ('description', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.localizedstring')),
                ('display_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.localizedstring')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeTint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tint_from', to='boundless.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField()),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.recipe')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.skill')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(choices=[(0, 'Single'), (1, 'Bulk'), (2, 'Mass')])),
                ('wear', models.PositiveIntegerField()),
                ('spark', models.PositiveIntegerField()),
                ('duration', models.PositiveIntegerField()),
                ('output_quantity', models.PositiveIntegerField()),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveSmallIntegerField()),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.recipegroup')),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
                ('recipe_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.recipelevel')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeGroupMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.recipegroup')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item')),
            ],
        ),
        migrations.AddField(
            model_name='recipe',
            name='output',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.item'),
        ),
        migrations.CreateModel(
            name='LocalizedStringText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lang', models.CharField(max_length=16, verbose_name='Language')),
                ('text', models.TextField()),
                ('string', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.localizedstring')),
            ],
        ),
        migrations.AddIndex(
            model_name='localizedstringtext',
            index=django.contrib.postgres.indexes.GinIndex(fields=['string'], name='boundless_l_string__91275e_gin'),
        ),
        migrations.AlterField(
            model_name='item',
            name='mint_value',
            field=models.FloatField(blank=True, null=True, verbose_name='Chrysominter Value'),
        ),
        migrations.AlterField(
            model_name='localizedstring',
            name='string_id',
            field=models.CharField(max_length=128, unique=True),
        ),
        migrations.AddField(
            model_name='item',
            name='description',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.localizedstring'),
        ),
        migrations.AddField(
            model_name='item',
            name='list_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.localizedstring'),
        ),
        migrations.AddField(
            model_name='skill',
            name='group',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='boundless.skillgroup'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='localizedstringtext',
            name='string',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strings', to='boundless.localizedstring'),
        ),
        migrations.AlterField(
            model_name='skill',
            name='name',
            field=models.CharField(max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='skillgroup',
            name='name',
            field=models.CharField(max_length=16, unique=True),
        ),
        migrations.RemoveField(
            model_name='recipetint',
            name='item',
        ),
        migrations.RemoveField(
            model_name='recipetint',
            name='recipe',
        ),
        migrations.RemoveField(
            model_name='recipeinput',
            name='recipe_level',
        ),
        migrations.RemoveField(
            model_name='recipelevel',
            name='recipe',
        ),
        migrations.RemoveField(
            model_name='reciperequirement',
            name='recipe',
        ),
        migrations.AddField(
            model_name='recipe',
            name='can_hand_craft',
            field=models.BooleanField(default=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='recipe',
            name='tints',
            field=models.ManyToManyField(related_name='_recipe_tints_+', to='boundless.Item'),
        ),
        migrations.AddField(
            model_name='recipegroup',
            name='members',
            field=models.ManyToManyField(to='boundless.Item'),
        ),
        migrations.DeleteModel(
            name='RecipeGroupMember',
        ),
        migrations.DeleteModel(
            name='RecipeTint',
        ),
        migrations.AddField(
            model_name='recipe',
            name='requirements',
            field=models.ManyToManyField(to='boundless.RecipeRequirement'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='levels',
            field=models.ManyToManyField(to='boundless.RecipeLevel'),
        ),
        migrations.AddField(
            model_name='recipelevel',
            name='inputs',
            field=models.ManyToManyField(to='boundless.RecipeInput'),
        ),
        migrations.RemoveIndex(
            model_name='localizedstringtext',
            name='boundless_l_string__91275e_gin',
        ),
        migrations.AddIndex(
            model_name='localizedstringtext',
            index=django.contrib.postgres.indexes.GinIndex(fields=['text'], name='boundless_l_text_aa0532_gin'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='boundless_s_name_a7d57d_gin'),
        ),
        migrations.AddIndex(
            model_name='skillgroup',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='boundless_s_name_7fe673_gin'),
        ),
        migrations.AddField(
            model_name='localizedstringtext',
            name='_plain_text',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='skill',
            name='description',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.localizedstring'),
        ),
        migrations.CreateModel(
            name='Emoji',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('image', models.ImageField(storage=storages.backends.azure_storage.AzureStorage(azure_container='local-emoji'), upload_to='')),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='skill',
            name='icon',
            field=models.ImageField(storage=storages.backends.azure_storage.AzureStorage(azure_container='local-skills'), upload_to=''),
        ),
        migrations.AlterField(
            model_name='world',
            name='image',
            field=models.ImageField(blank=True, null=True, storage=storages.backends.azure_storage.AzureStorage(azure_container='local-worlds'), upload_to=''),
        ),
        migrations.CreateModel(
            name='EmojiAltName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('emoji', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.emoji')),
            ],
        ),
        migrations.RemoveField(
            model_name='world',
            name='description',
        ),
        migrations.RenameField(
            model_name='world',
            old_name='exo_notification_sent',
            new_name='notification_sent',
        ),
        migrations.RemoveField(
            model_name='worldblockcolor',
            name='_days_since_last',
        ),
        migrations.AddField(
            model_name='resourcecount',
            name='_average_per_chunk',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='html_name',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.RemoveField(
            model_name='worldblockcolor',
            name='_exist_on_perm',
        ),
        migrations.RemoveField(
            model_name='worldblockcolor',
            name='_exist_via_transform',
        ),
        migrations.RemoveField(
            model_name='worldblockcolor',
            name='_new_color',
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='first_world',
            field=models.ForeignKey(blank=True, help_text='First non-Exo world with this color', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='boundless.world'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='is_new',
            field=models.BooleanField(default=False, help_text='This is the first time this WBC has appeared on non-Exo'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='is_new_transform',
            field=models.BooleanField(default=False, help_text='This is the first time this WBC has been avaiable via transform'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='last_exo',
            field=models.ForeignKey(blank=True, help_text='Most recent Exo with this color (only for Exo WBCs)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='boundless.world'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='transform_first_world',
            field=models.ForeignKey(blank=True, help_text='First non-Exo WBC that can transform into this one', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='boundless.world'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='transform_last_exo',
            field=models.ForeignKey(blank=True, help_text='Most recent Exo WBC that can transform into this one (only for Exo WBCs)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='boundless.world'),
        ),
        migrations.AlterField(
            model_name='worldblockcolor',
            name='world',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.world'),
        ),
        migrations.AddField(
            model_name='worldblockcolor',
            name='is_default',
            field=models.BooleanField(default=True, help_text='Is this the color the world spawned with?'),
        ),
        migrations.AlterModelOptions(
            name='worldblockcolor',
            options={'ordering': ['item_id']},
        ),
        migrations.AlterField(
            model_name='item',
            name='string_id',
            field=models.CharField(db_index=True, max_length=64, verbose_name='String ID'),
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('gameobj_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boundless.gameobj')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Name')),
                ('block_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.item')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('boundless.gameobj',),
        ),
        migrations.CreateModel(
            name='AltItem',
            fields=[
                ('gameobj_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='boundless.gameobj')),
                ('name', models.CharField(max_length=64, verbose_name='String ID')),
                ('base_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.item')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('boundless.gameobj',),
        ),
        migrations.CreateModel(
            name='ForumImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField()),
                ('game_obj', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='boundless.gameobj')),
                ('checksum', models.CharField(default=None, max_length=64)),
                ('shortcut_url', models.CharField(default=None, max_length=64)),
            ],
        ),
        migrations.AddField(
            model_name='world',
            name='sort_name',
            field=models.TextField(blank=True, db_index=True, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='text_name',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='recipe',
            name='required_backer_tier',
            field=models.PositiveSmallIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='recipe',
            name='required_event',
            field=models.CharField(blank=True, choices=[('GLEAMBOW_RACING', 'Gleambow Racting'), ('CHRISTMAS', 'Christmas'), ('VALENTINES', 'Valentines'), ('HALLOWEEN', 'Halloween'), ('BIRTHDAY', 'Birthday')], max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='machine',
            field=models.CharField(blank=True, choices=[('COMPACTOR', 'COMPACTOR'), ('CRAFTING_TABLE', 'CRAFTING_TABLE'), ('DYE_MAKER', 'DYE_MAKER'), ('EXTRACTOR', 'EXTRACTOR'), ('FURNACE', 'FURNACE'), ('MIXER', 'MIXER'), ('REFINERY', 'REFINERY'), ('WORKBENCH', 'WORKBENCH')], max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='machine_level',
            field=models.CharField(blank=True, choices=[('', ''), ('Standard', 'Standard'), ('Powered', 'Powered'), ('Overdriven', 'Overdriven'), ('Supercharged', 'Supercharged')], max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='recipegroup',
            name='name',
            field=models.CharField(max_length=32, unique=True),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='machine',
            field=models.CharField(blank=True, choices=[('COMPACTOR', 'COMPACTOR'), ('CRAFTING_TABLE', 'CRAFTING_TABLE'), ('DYE_MAKER', 'DYE_MAKER'), ('EXTRACTOR', 'EXTRACTOR'), ('FURNACE', 'FURNACE'), ('MIXER', 'MIXER'), ('REFINERY', 'REFINERY'), ('WORKBENCH', 'WORKBENCH')], db_index=True, max_length=16, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='is_finalized',
            field=models.BooleanField(null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='is_public_claim',
            field=models.BooleanField(null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='is_public_edit',
            field=models.BooleanField(null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='notification_sent',
            field=models.BooleanField(null=True),
        ),
    ]
