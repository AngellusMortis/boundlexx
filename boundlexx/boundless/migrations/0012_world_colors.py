# Generated by Django 3.0.9 on 2020-08-04 02:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ('boundless', '0011_colorvalue'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='colorvalue',
            unique_together={('color', 'color_type')},
        ),
        migrations.CreateModel(
            name='WorldCreatureColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creature_type', models.CharField(choices=[('CUTTLETRUNK', 'Cuttletrunk'), ('HOPPER', 'Hopper'), ('HUNTER', 'Hunter'), ('ROADRUNNER', 'Roadrunner'), ('SPITTER', 'Spitter'), ('WILDSTOCK', 'Wildstock')], max_length=16)),
                ('color_data', models.TextField()),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.World')),
            ],
            options={
                'unique_together': {('world', 'creature_type')},
            },
        ),
        migrations.AlterField(
            model_name='world',
            name='atmosphere_color_b',
            field=models.FloatField(null=True, verbose_name='Atmosphere Linear B Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='atmosphere_color_g',
            field=models.FloatField(null=True, verbose_name='Atmosphere Linear G Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='atmosphere_color_r',
            field=models.FloatField(null=True, verbose_name='Atmosphere Linear R Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='description',
            field=models.CharField(max_length=32, null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='world',
            name='is_creative',
            field=models.BooleanField(db_index=True, default=False, null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='is_locked',
            field=models.BooleanField(db_index=True, default=False, null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='is_public',
            field=models.BooleanField(db_index=True, default=True, null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='name',
            field=models.CharField(max_length=64, null=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='world',
            name='region',
            field=models.CharField(choices=[('use', 'US East'), ('usw', 'US West'), ('euc', 'EU Central'), ('aus', 'Australia'), ('creative', 'Creative')], max_length=16, null=True, verbose_name='Server Region'),
        ),
        migrations.AlterField(
            model_name='world',
            name='size',
            field=models.IntegerField(null=True, verbose_name='World Size'),
        ),
        migrations.AlterField(
            model_name='world',
            name='tier',
            field=models.PositiveSmallIntegerField(choices=[(0, 'Placid (1)'), (1, 'Temperate (2)'), (2, 'Rugged (3)'), (3, 'Inhospitable (4)'), (4, 'Turbulent (5)'), (5, 'Fierce (6)'), (6, 'Savage (7)'), (7, 'Brutal (8)')], null=True, verbose_name='Tier'),
        ),
        migrations.AlterField(
            model_name='world',
            name='time_offset',
            field=models.DateTimeField(null=True, verbose_name='Time Offset'),
        ),
        migrations.AlterField(
            model_name='world',
            name='water_color_b',
            field=models.FloatField(null=True, verbose_name='Water Linear B Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='water_color_g',
            field=models.FloatField(null=True, verbose_name='Water Linear G Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='water_color_r',
            field=models.FloatField(null=True, verbose_name='Water Linear R Color'),
        ),
        migrations.AlterField(
            model_name='world',
            name='world_type',
            field=models.CharField(choices=[('LUSH', 'Lush'), ('METAL', 'Metal'), ('COAL', 'Coal'), ('CORROSIVE', 'Corrosive'), ('SHOCK', 'Shock'), ('BLAST', 'Blast'), ('TOXIC', 'Toxic'), ('CHILL', 'Chill'), ('BURN', 'Burn'), ('UMBRIS', 'Umbris'), ('RIFT', 'Rift'), ('BLINK', 'Blink')], max_length=9, null=True, verbose_name='World Type'),
        ),
        migrations.AlterModelOptions(
            name='gameobj',
            options={'ordering': ['game_id']},
        ),
        migrations.AddField(
            model_name='world',
            name='closest_world',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.World'),
        ),
        migrations.AddField(
            model_name='world',
            name='closest_world_distance',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='core_liquid',
            field=models.TextField(blank=True, choices=[('lava', 'Lava'), ('water', 'WATER')], max_length=5, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='surface_liquid',
            field=models.TextField(blank=True, choices=[('lava', 'Lava'), ('water', 'WATER')], max_length=5, null=True),
        ),
        migrations.AddField(
            model_name='world',
            name='forum_id',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterModelOptions(
            name='world',
            options={'ordering': ['id']},
        ),
        migrations.RemoveField(
            model_name='world',
            name='core_liquid',
        ),
        migrations.RemoveField(
            model_name='world',
            name='surface_liquid',
        ),
        migrations.RemoveField(
            model_name='world',
            name='closest_world',
        ),
        migrations.RemoveField(
            model_name='world',
            name='closest_world_distance',
        ),
        migrations.AlterField(
            model_name='world',
            name='forum_id',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='world',
            name='assignment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='boundless.World'),
        ),
        migrations.CreateModel(
            name='WorldDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.PositiveSmallIntegerField(verbose_name='Distance to work in blinksecs')),
                ('world_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.World')),
                ('world_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='boundless.World')),
            ],
        ),
        migrations.CreateModel(
            name='WorldBlockColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.Color')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.Item')),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.World')),
                ('_new_color', models.NullBooleanField()),
                ('_exist_via_transform', models.NullBooleanField()),
                ('_exist_on_perm', models.NullBooleanField()),
            ],
            options={
                'unique_together': {('world', 'item')},
            },
        ),
    ]
