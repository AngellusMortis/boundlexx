# Generated by Django 3.0.8 on 2020-07-26 15:56

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('boundless', '0005_fill_out_worlds'),
    ]

    operations = [
        migrations.CreateModel(
            name='WorldPoll',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.World')),
            ],
        ),
        migrations.CreateModel(
            name='WorldPollResult',
            fields=[
                ('time', models.DateTimeField(auto_now=True, primary_key=True, serialize=False)),
                ('player_count', models.PositiveSmallIntegerField(verbose_name='Player Count')),
                ('beacon_count', models.PositiveIntegerField(verbose_name='Beacon Count')),
                ('plot_count', models.PositiveIntegerField(verbose_name='Plot Count')),
                ('total_prestige', models.PositiveIntegerField(verbose_name='Total Prestige')),
                ('world_poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.WorldPoll')),
            ],
            options={
                'unique_together': {('time', 'world_poll')},
            },
        ),
        migrations.CreateModel(
            name='ResourceCount',
            fields=[
                ('time', models.DateTimeField(auto_now=True, primary_key=True, serialize=False)),
                ('count', models.PositiveIntegerField(verbose_name='Plot Count')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.Item')),
                ('world_poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.WorldPoll')),
            ],
            options={
                'unique_together': {('time', 'world_poll', 'item')},
            },
        ),
        migrations.CreateModel(
            name='LeaderboardRecord',
            fields=[
                ('time', models.DateTimeField(auto_now=True, primary_key=True, serialize=False)),
                ('world_rank', models.PositiveSmallIntegerField(verbose_name='World Rank')),
                ('guild_tag', models.CharField(max_length=7, verbose_name='Guild Tag')),
                ('mayor_id', models.PositiveSmallIntegerField()),
                ('mayor_name', models.CharField(max_length=64)),
                ('mayor_type', models.PositiveSmallIntegerField()),
                ('name', models.CharField(max_length=64)),
                ('prestige', models.PositiveIntegerField()),
                ('world_poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='boundless.WorldPoll')),
            ],
            options={
                'unique_together': {('time', 'world_poll', 'world_rank')},
            },
        ),
        migrations.RunSQL(
            'ALTER TABLE "boundless_worldpollresult" DROP CONSTRAINT "boundless_worldpollresult_pkey"', reverse_sql=migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            "SELECT create_hypertable('boundless_worldpollresult', 'time', 'world_poll_id', 4, chunk_time_interval => 86400000000, migrate_data => true, create_default_indexes => false)", reverse_sql=migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            'ALTER TABLE "boundless_resourcecount" DROP CONSTRAINT "boundless_resourcecount_pkey"', reverse_sql=migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            "SELECT create_hypertable('boundless_resourcecount', 'time', 'world_poll_id', 4, chunk_time_interval => 86400000000, migrate_data => true, create_default_indexes => false)", reverse_sql=migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            'ALTER TABLE "boundless_leaderboardrecord" DROP CONSTRAINT "boundless_leaderboardrecord_pkey"', reverse_sql=migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            "SELECT create_hypertable('boundless_leaderboardrecord', 'time', 'world_poll_id', 4, chunk_time_interval => 86400000000, migrate_data => true, create_default_indexes => false)", reverse_sql=migrations.RunSQL.noop
        ),
    ]
